diff -ruN distarray-2.12.2/Lib/mvDistArray.py distarray-2.12.2-patch/Lib/mvDistArray.py
--- distarray-2.12.2/Lib/mvDistArray.py	2017-09-22 14:37:58.000000000 -0600
+++ distarray-2.12.2-patch/Lib/mvDistArray.py	2023-02-02 22:48:19.672633735 -0700
@@ -3,7 +3,7 @@
 """
 Distributed array class
 
-This code is provided with the hope that it will be useful. 
+This code is provided with the hope that it will be useful.
 No guarantee is provided whatsoever. Use at your own risk.
 
 Alex Pletzer, Tech-X Corp. (2012)
@@ -28,21 +28,21 @@
     res[:] = a # copy
     return res
 
-def daZeros(shape, dtype=numpy.float):
+def daZeros(shape, dtype=float):
     """
     Zero constructor
     @param shape the shape of the array
-    @param dtype the numpy data type 
+    @param dtype the numpy data type
     """
     res = DistArray(shape, dtype)
     res[:] = numpy.zeros(shape, dtype)
     return res
 
-def daOnes(shape, dtype=numpy.float):
+def daOnes(shape, dtype=float):
     """
     One constructor
     @param shape the shape of the array
-    @param dtype the numpy data type 
+    @param dtype the numpy data type
     """
     res = DistArray(shape, dtype)
     res[:] = numpy.zeros(shape, dtype)
@@ -51,9 +51,9 @@
 class DistArray(numpy.ndarray):
 
     """
-    Distributed array. Each process owns data and can expose a subset 
-    of the data to other processes. These are known as windows. Any 
-    number of windows can be exposed and the data of windows can be 
+    Distributed array. Each process owns data and can expose a subset
+    of the data to other processes. These are known as windows. Any
+    number of windows can be exposed and the data of windows can be
     overlapping. Any process can access exposed windows from any other
     process. This relies on MPI-2 one-sided get communication.
     """
@@ -106,7 +106,7 @@
         @param winID the data window ID
         """
         # buffer for source data
-        dataSrc = numpy.ones(self[slce].shape, self.dtyp) 
+        dataSrc = numpy.ones(self[slce].shape, self.dtyp)
         # buffer for destination data
         dataDst = numpy.ones(self[slce].shape, self.dtyp)
         self.windows[winID] = {
@@ -152,14 +152,14 @@
     comm = MPI.COMM_WORLD
     rk = comm.Get_rank()
     sz = comm.Get_size()
-    
+
     # create local data container
     n, m = 3, 4
     data = numpy.reshape(numpy.array( [rk*100.0 + i for i in range(n*m) ] ), (n,m))
 
     # create dist array
     da = DistArray(data.shape, data.dtype)
-    
+
     # load the data
     da[:] = data
 
@@ -179,7 +179,7 @@
         try:
             assert( numpy.all( diff == 100 ) )
             print('[%d]...OK' % rk)
-        except: 
+        except:
             print('[%d] daLocalEast=%s\ndaOtherEast=%s' % (rk, str(daLocalEast), str(daOtherEast)))
             print('error: ', numpy.sum( diff - 100 ))
     else:
diff -ruN distarray-2.12.2/Lib/mvGhostedDistArray.py distarray-2.12.2-patch/Lib/mvGhostedDistArray.py
--- distarray-2.12.2/Lib/mvGhostedDistArray.py	2017-09-22 14:37:58.000000000 -0600
+++ distarray-2.12.2-patch/Lib/mvGhostedDistArray.py	2023-02-02 22:48:46.532789269 -0700
@@ -3,7 +3,7 @@
 """
 Distributed array class with ghosts
 
-This code is provided with the hope that it will be useful. 
+This code is provided with the hope that it will be useful.
 No guarantee is provided whatsoever. Use at your own risk.
 
 Alex Pletzer, Tech-X Corp. (2012)
@@ -26,18 +26,18 @@
     res[:] = a # copy
     return res
 
-def ghZeros(shape, dtype=numpy.float, ghostWidth=1):
+def ghZeros(shape, dtype=float, ghostWidth=1):
     """
     ghosted distributed array zero constructor
     @param shape the shape of the array
-    @param dtype the numpy ghta type 
+    @param dtype the numpy ghta type
     @param ghostWidth the number of ghosts (>= 0)
     """
     res = GhostedDistArray(shape, dtype)
     res[:] = numpy.zeros(shape, dtype)
     return res
 
-def ghOnes(shape, dtype=numpy.float, ghostWidth=1):
+def ghOnes(shape, dtype=float, ghostWidth=1):
     """
     ghosted distributed array one constructor
     @param shape the shape of the array
@@ -51,8 +51,8 @@
 class GhostedDistArray(DistArray):
 
     """
-    Ghosted distributed array. Each process owns data and exposes the 
-    halo region to other processes. These are accessed with tuples 
+    Ghosted distributed array. Each process owns data and exposes the
+    halo region to other processes. These are accessed with tuples
     such (1, 0) for north, (-1, 0) for south, etc.
     """
 
@@ -61,7 +61,7 @@
         Constructor
         @param shape shape of the array
         @param dtyp numpy data type
-        @param ghostWidth the width of the halo 
+        @param ghostWidth the width of the halo
         """
         # call the parent Ctor
         DistArray.__init__(self, shape, dtyp)
@@ -79,13 +79,13 @@
                 winId = tuple( [0 for i in range(dim) ] \
                                + [drect] + \
                                [0 for i in range(dim+1, ndim) ] )
-                
+
                 slce = slice(0, ghostWidth)
                 if drect == 1:
                     slce = slice(shape[dim] - ghostWidth, shape[dim])
-        
+
                 slab = self.getSlab(dim, slce)
-                
+
                 # expose MPI window
                 self.expose(slab, winId)
 
@@ -99,14 +99,14 @@
         """
         shape = self.shape
         ndim = len(shape)
-        
+
         slab = [ slice(0, shape[i]) for i in range(dim) ] \
                     + [slce] + \
                   [ slice(0, shape[i]) for i in range(dim+1, ndim) ]
         return slab
 
 ######################################################################
-    
+
 def test():
 
     from mpi4py import MPI
@@ -122,14 +122,14 @@
                          (n,m))
 
     # create dist array
-    
+
     da = GhostedDistArray(data.shape, data.dtype)
 
     # load the data on each PE
     da[:] = data
     print(da)
 
-    # this shows how one can access slabs 
+    # this shows how one can access slabs
     for pe in range(sz):
         winIndex = (-1, 0)
         print('[%d] %s slab belonging to %d is: \n' % (rk, str(winIndex), pe), \
